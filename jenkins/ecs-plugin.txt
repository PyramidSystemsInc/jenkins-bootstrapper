# INSTRUCTIONS FOR HOST AT CONFIGURATION

DONE





# INSTRUCTIONS FOR MASTER AT CONFIGURATION

1. Edit the crontab (/var/spool/cron/ec2-user)
* * * * * /home/ec2-user/getQueueSize.sh
* * * * * ( sleep 20; /home/ec2-user/getQueueSize.sh )
* * * * * ( sleep 40; /home/ec2-user/getQueueSize.sh )





# INSTRUCTIONS FOR MASTER WHEN PENDING BUILD(S)

// 1. Create slaves
<?xml version="1.1" encoding="UTF-8"?>
<slave>
  <name>slave2</name>
  <description></description>
  <remoteFS>/home/ec2-user/slave-two</remoteFS>
  <numExecutors>1</numExecutors>
  <mode>NORMAL</mode>
  <retentionStrategy class="hudson.slaves.RetentionStrategy$Always"/>
  <launcher class="hudson.slaves.JNLPLauncher">
    <workDirSettings>
      <disabled>false</disabled>
      <internalDir>remoting</internalDir>
      <failIfWorkDirIsMissing>false</failIfWorkDirIsMissing>
    </workDirSettings>
  </launcher>
  <label>ecs</label>
  <nodeProperties/>
</slave>
java -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:$(./printJenkinsPassword.sh) create-node slave2 < slave.xml

// 2. Scale the cluster
???????

// 3. Edit the docker-compose.yml (NEEDED?)
???????

// 4. ECS CLI compose-up
???????





# INSTRUCTIONS FOR SLAVES

// 1. Download agent.jar
wget http://18.191.173.214:8080/jnlpJars/agent.jar

// 2. curl for slave secret
JENKINS_USER='admin'
JENKINS_PASSWORD='6551f1de2d344765aab09b86a2ec873f'
JENKINS_IP='http://18.191.173.214'
NODE_URL='http://18.191.173.214:8080/computer/slave1'
curl -H "$(curl -s 'http://'$JENKINS_USER':'$JENKINS_PASSWORD'@'$JENKINS_IP':8080/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb')" -L -s -u $JENKINS_USER:$JENKINS_PASSWORD $NODE_URL/slave-agent.jnlp | grep -Po '[A-Fa-f0-9]{64}'

// 3. Connect to master
java -jar agent.jar -jnlpUrl http://18.191.173.214:8080/computer/slave1/slave-agent.jnlp -secret 6e01b836391068a4fd94cb916f43f51e63d8cd8581a28785d779b6389b3d6cd1 -workDir "/home/jeff/Desktop/jenkins-test"





# EXTRA NOTES

// Configure the Amazon ECS plugin
ECS_CLUSTER_COUNT=$(aws ecs list-clusters --region us-east-2 | jq '.clusterArns | length')
for (( ECS_CLUSTER_INDEX=0; ECS_CLUSTER_INDEX<ECS_CLUSTER_COUNT; ECS_CLUSTER_INDEX++ )) do
  ECS_CLUSTER=$(aws ecs list-clusters --region us-east-2 | jq '.clusterArns['"$ECS_CLUSTER_INDEX"']')
  if [[ $ECS_CLUSTER =~ $PROJECT_NAME-jenkins-slaves ]]; then
    JENKINS_SLAVES_ECS_CLUSTER_ARN=$(sed -e 's/^"//g' -e 's/"$//g' <<< $ECS_CLUSTER)
  fi
done
JENKINS_IP=$(curl ipinfo.io/ip)
sudo ed -s /var/lib/jenkins/config.xml >> /dev/null <<EOF
i
  <clouds>
    <com.cloudbees.jenkins.plugins.amazonecs.ECSCloud plugin="amazon-ecs@1.16">
      <name>AWS</name>
      <cluster>$JENKINS_SLAVES_ECS_CLUSTER_ARN</cluster>
      <regionName>us-east-2</regionName>
      <tunnel></tunnel>
      <jenkinsUrl>http://$JENKINS_IP:8080/</jenkinsUrl>
      <slaveTimoutInSeconds>900</slaveTimoutInSeconds>
    </com.cloudbees.jenkins.plugins.amazonecs.ECSCloud>
  </clouds>
.
w
q
EOF

// Failed attempt to get slave secret from the <JENKINS_URL>/script page
new String(new jenkins.security.HMACConfidentialKey(jenkins.slaves.JnlpSlaveAgentProtocol.class, "secret").getKey().getEncoded(), "UTF-8");

// If AWS plugin and ECS template is needed
  <clouds>
    <com.cloudbees.jenkins.plugins.amazonecs.ECSCloud plugin="amazon-ecs@1.16">
      <name>ecs-cloud</name>
      <templates>
        <com.cloudbees.jenkins.plugins.amazonecs.ECSTaskTemplate>
          <templateName>ecs-slave</templateName>
          <label>ecs-slave</label>
          <image>jenkinsci/jnlp-slave</image>
          <remoteFSRoot>/home/jenkins</remoteFSRoot>
          <memory>0</memory>
          <memoryReservation>2048</memoryReservation>
          <cpu>1</cpu>
          <subnets></subnets>
          <securityGroups></securityGroups>
          <assignPublicIp>false</assignPublicIp>
          <executionRole>ecsTaskExecutionRole</executionRole>
          <launchType>EC2</launchType>
          <privileged>false</privileged>
        </com.cloudbees.jenkins.plugins.amazonecs.ECSTaskTemplate>
      </templates>
      <credentialsId></credentialsId>
      <cluster>arn:aws:ecs:us-east-2:118104210923:cluster/rispd-jenkins-slaves</cluster>
      <regionName>us-east-2</regionName>
      <tunnel></tunnel>
      <jenkinsUrl>http://18.222.239.125:8080/</jenkinsUrl>
      <slaveTimoutInSeconds>900</slaveTimoutInSeconds>
    </com.cloudbees.jenkins.plugins.amazonecs.ECSCloud>
  </clouds>

// At <JENKINS_URL>/script
println(hudson.util.Secret.fromString("I done be encrypted").getEncryptedValue())
println(hudson.util.Secret.decrypt("{AQAAABAAAAAgRZQIVgSHMjC1ANeEhBKbIwVfG2FCAgFIbDive4WpoZImXyRg/+G2UexKVCDS2Uq+}"))

// To encrypt
echo $(curl -H "$(curl -s 'http://admin:fc9f473fcf1a418089b6694de5cba613@localhost:8080/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb)')" -d "script=println(hudson.util.Secret.fromString(\"I done be encrypted\").getEncryptedValue())" admin:fc9f473fcf1a418089b6694de5cba613@localhost:8080/script) | grep -o '<h2>Result</h2>.*</pre>' | grep -o '{.*}'

// To decrypt (DOES NOT WORK)
echo $(curl -H "$(curl -s 'http://admin:fc9f473fcf1a418089b6694de5cba613@localhost:8080/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb)')" -d 'script=println(hudson.util.Secret.decrypt("{AQAAABAAAAAgRZQIVgSHMjC1ANeEhBKbIwVfG2FCAgFIbDive4WpoZImXyRg/+G2UexKVCDS2Uq+}"))' admin:fc9f473fcf1a418089b6694de5cba613@localhost:8080/script) | grep -o '<h2>Result</h2>.*</pre>'

// credentials.xml
        <com.cloudbees.jenkins.plugins.awscredentials.AWSCredentialsImpl plugin="aws-credentials@1.23">
          <scope>GLOBAL</scope>
          <id>56d04a2c-4f92-4f9d-a053-58c732aed97d</id>
          <description></description>
          <accessKey>...
          <secretKey>...
          <iamRoleArn></iamRoleArn>
          <iamMfaSerialNumber></iamMfaSerialNumber>
        </com.cloudbees.jenkins.plugins.awscredentials.AWSCredentialsImpl>






// LINE 17 of configureJenkins.sh
# Configure the Amazon ECS plugin
ECS_CLUSTER_COUNT=$(aws ecs list-clusters --region us-east-2 | jq '.clusterArns | length')
for (( ECS_CLUSTER_INDEX=0; ECS_CLUSTER_INDEX<ECS_CLUSTER_COUNT; ECS_CLUSTER_INDEX++ )) do
  ECS_CLUSTER=$(aws ecs list-clusters --region us-east-2 | jq '.clusterArns['"$ECS_CLUSTER_INDEX"']')
  if [[ $ECS_CLUSTER =~ $PROJECT_NAME-jenkins-slaves ]]; then
    JENKINS_SLAVES_ECS_CLUSTER_ARN=$(sed -e 's/^"//g' -e 's/"$//g' <<< $ECS_CLUSTER)
  fi
done
JENKINS_IP=$(curl ipinfo.io/ip)
sudo ed -s /var/lib/jenkins/config.xml >> /dev/null <<EOF
i
  <clouds>
    <com.cloudbees.jenkins.plugins.amazonecs.ECSCloud plugin="amazon-ecs@1.16">
      <name>AWS</name>
      <cluster>$JENKINS_SLAVES_ECS_CLUSTER_ARN</cluster>
      <regionName>us-east-2</regionName>
      <tunnel></tunnel>
      <jenkinsUrl>http://$JENKINS_IP:8080/</jenkinsUrl>
      <slaveTimoutInSeconds>900</slaveTimoutInSeconds>
    </com.cloudbees.jenkins.plugins.amazonecs.ECSCloud>
  </clouds>
.
w
q
EOF








// getQueueSize.sh
#! /bin/bash

JENKINS_PASSWORD=$(/home/ec2-user/printJenkinsPassword.sh)
JENKINS_CRUMB=$(curl -s 'http://admin:'$JENKINS_PASSWORD'@localhost:8080/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb)')
curl -H $JENKINS_CRUMB -L -s -u admin:$JENKINS_PASSWORD http://localhost:8080/queue/api/json | jq '.items | length'









// 2018.09.24 - Giving up on ECS-CLI
aws ecs list-container-instances --cluster rispd-jenkins-slaves --region us-east-2
aws ecs describe-container-instances --cluster rispd-jenkins-slaves --region us-east-2 --container-instances 9a4026a1-700e-4d09-9eb5-ab21db035c34




// 2018.09.26 - Organizing and linting scripts
PROJECT_NAME='rispd'
INSTANCE_STATUSES=$(echo $(aws ec2 describe-instances --query 'Reservations[*].Instances[*].[State.Name,Tags[?Key==`Name`].Value,PublicIpAddress]') | jq '.')
STATUS_COUNT=$(echo $INSTANCE_STATUSES | jq '. | length')
for (( STATUS_INDEX=0; STATUS_INDEX<STATUS_COUNT; STATUS_INDEX++ )) do
  INSTANCE_STATUS=$(echo $INSTANCE_STATUSES | jq '.['"$STATUS_INDEX"']')
  INSTANCE_RUN_STATE=$(echo $INSTANCE_STATUS | jq '.[0][0]')
  INSTANCE_NAME=$(sed -e 's/^"//g' -e 's/"$//g' <<< $(echo $INSTANCE_STATUS | jq '.[0][1][0]'))
  if [[ $INSTANCE_RUN_STATE == \"running\" ]] && [[ $INSTANCE_NAME == $PROJECT_NAME-jenkins ]]; then
    INSTANCE_PUBLIC_IP=$(sed -e 's/^"//g' -e 's/"$//g' <<< $(echo $INSTANCE_STATUS | jq '.[0][2]'))
    echo $INSTANCE_PUBLIC_IP
  fi
done


function copyFile() {
  FILE_TO_COPY=("$(cat "$1")")
	cat <<- EOF > "$2"
  $FILE_TO_COPY
	EOF
}

